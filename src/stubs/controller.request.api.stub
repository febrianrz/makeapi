<?php

namespace App\Http\Controllers\Api;

use DataTables;
use App\ModelName;
use App\Helpers\Select2;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Http\Controllers\Controller;
use App\Http\Requests\ModelNameRequest;
use App\Http\Resources\ModelNameResource;
use Febrianrz\Makeapi\Helpers\MAHelper;

class ModelNameController extends Controller
{
    protected $model = ModelName::class;

    protected $relationships = [];

    /**
     * Display a listing of the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $query = ModelName::query();

        $this->loadRelationships($query);

        switch ($request->format) {
            case 'select2':
                return Select2::of(
                    $query->orderBy('id'),
                    'name',
                    'id'
                );

            case "datatable":
                return DataTables::of($query)
                    ->addColumn('urls', function ($VariableName) {
                        $urls = [];

                        if (Auth::user()->can('update', $VariableName)) {
                            $urls['edit'] = route('api.PluralDashName.update', [
                                'SnakeName' => $VariableName->id
                            ]);
                        }

                        if (Auth::user()->can('delete', $VariableName)) {
                            $urls['delete'] = route('api.PluralDashName.destroy', [
                                'SnakeName' => $VariableName->id
                            ]);
                        }

                        return $urls;
                    })
                    ->with('urls', function () {
                        $urls = [];

                        if (Auth::user()->can('create', ModelName::class)) {
                            $urls['create'] = route('api.PluralDashName.store');
                        }

                        return $urls;
                    })
                    ->toJson();
            default:
                    MAHelper::filter($request,$query);
                    return ModelNameResource::collection($query->paginate());
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \App\Http\Requests\ModelNameRequest  $request
     * @return \Illuminate\Http\Response
     */
    public function store(ModelNameRequest $request)
    {
        $VariableName = new ModelName();

        $VariableName->fill(
            $request->only([
                'name',
            ])
        );

        $VariableName->save();

        return [
            'message' => "TitleName [{$VariableName->name}] berhasil dibuat",
            'data' => $VariableName,
        ];
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\ModelName  $VariableName
     * @return \Illuminate\Http\Response
     */
    public function show(ModelName $VariableName)
    {
        $this->loadRelationships($VariableName);

        return ['data' => $VariableName];
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \App\Http\Requests\ModelNameRequest  $request
     * @param  \App\ModelName  $VariableName
     * @return \Illuminate\Http\Response
     */
    public function update(ModelNameRequest $request, ModelName $VariableName)
    {
        $name = $VariableName->name;

        $VariableName->fill(
            $request->only([
                'name',
            ])
        );

        $VariableName->save();

        return [
            'message' => "TitleName [{$name}] berhasil diubah",
            'data' => $VariableName,
        ];
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\ModelName  $VariableName
     * @return \Illuminate\Http\Response
     */
    public function destroy(ModelName $VariableName)
    {
        $VariableName->delete();

        return [
            'message' => "TitleName [{$VariableName->name}] berhasil dihapus",
            'data' => $VariableName,
        ];
    }
}
